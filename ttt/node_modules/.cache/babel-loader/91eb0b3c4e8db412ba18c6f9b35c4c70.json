{"ast":null,"code":"class Game {\n  constructor() {\n    this.squares = Array(9).fill(null);\n\n    this.calculateWinner = () => {\n      const lines = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]];\n\n      for (let i = 0; i < lines.length; i++) {\n        const [a, b, c] = lines[i];\n\n        if (this.squares[a] !== \":\" && this.squares[a] === squares[b] && this.squares[a] === squares[c]) {\n          return this.squares[a];\n        }\n      }\n\n      return null;\n    };\n\n    this.setAction = (player, action) => {\n      this.squares[action] = player;\n    };\n\n    this.getAIAction = () => {\n      // return center or top-left in first AI move\n      if (this.squares.filter(s => s === \"X\").length === 1) {\n        if (!this.squares[4]) {\n          return 4;\n        } else if (!this.squares[0]) {\n          return 0;\n        }\n      } // use minmax algorithm\n      // find action with least value by choosing opp's action with highest value\n\n\n      let [next_val, action] = this.minmax(squares, \"O\");\n      console.log(`getAIAction Got ${next_val} ${action} from minmax`);\n\n      if (action == null) {\n        action = squares.findIndex(s => s === \":\");\n      }\n\n      return action;\n    };\n\n    this.minmax = player => {\n      let squares = this.squares.slice();\n      let next_val = 0;\n      let action = -1;\n      const best_val = player === \"X\" ? 1 : -1;\n      const next_player = player === \"X\" ? \"O\" : \"X\"; // pick a winning/loss-avoiding move if one exist\n\n      [player, next_player].forEach(cplayer => {\n        if (next_val === 0) {\n          squares.forEach((element, index) => {\n            if (element === \":\") {\n              squares[index] = cplayer;\n\n              if (this.calculateWinner(squares) === cplayer) {\n                next_val = cplayer === player ? best_val : -best_val;\n                console.log(`${cplayer} wins at ${index} with board ${squares} and next val is ${next_val}`);\n                action = index;\n              }\n\n              squares[index] = \":\";\n            }\n          });\n        }\n      });\n      console.log(`checked for winner and val is ${next_val}`); // pick the best remaining\n\n      if (next_val === 0) {\n        let [cnext_val, caction] = [next_val, action];\n        squares.forEach((element, index) => {\n          if (element === \":\") {\n            squares[index] = player;\n            [next_val, action] = this.minmax(squares, player = player === \"X\" ? \"O\" : \"X\", depth = depth + 1);\n\n            if (next_val === -best_val) {\n              [cnext_val, caction] = [next_val, action];\n            } else if (next_val === 0) {\n              [cnext_val, caction] = [next_val, action];\n            }\n\n            squares[index] = \":\";\n          }\n        });\n        [next_val, action] = [cnext_val, caction];\n      }\n\n      return [next_val, action];\n    };\n  }\n\n}","map":{"version":3,"sources":["/Users/jeanmariemariadassou/gamesui/ttt/src/logic/Game.js"],"names":["Game","squares","Array","fill","calculateWinner","lines","i","length","a","b","c","setAction","player","action","getAIAction","filter","s","next_val","minmax","console","log","findIndex","slice","best_val","next_player","forEach","cplayer","element","index","cnext_val","caction","depth"],"mappings":"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","sourcesContent":["class Game {\n  squares = Array(9).fill(null);\n\n  calculateWinner = () => {\n    const lines = [\n      [0, 1, 2],\n      [3, 4, 5],\n      [6, 7, 8],\n      [0, 3, 6],\n      [1, 4, 7],\n      [2, 5, 8],\n      [0, 4, 8],\n      [2, 4, 6],\n    ];\n    for (let i = 0; i < lines.length; i++) {\n      const [a, b, c] = lines[i];\n      if (\n        this.squares[a] !== \":\" &&\n        this.squares[a] === squares[b] &&\n        this.squares[a] === squares[c]\n      ) {\n        return this.squares[a];\n      }\n    }\n    return null;\n  };\n\n  setAction = (player, action) => {\n    this.squares[action] = player;\n  };\n\n  getAIAction = () => {\n    // return center or top-left in first AI move\n    if (this.squares.filter((s) => s === \"X\").length === 1) {\n      if (!this.squares[4]) {\n        return 4;\n      } else if (!this.squares[0]) {\n        return 0;\n      }\n    }\n    // use minmax algorithm\n    // find action with least value by choosing opp's action with highest value\n    let [next_val, action] = this.minmax(squares, \"O\");\n    console.log(`getAIAction Got ${next_val} ${action} from minmax`);\n    if (action == null) {\n      action = squares.findIndex((s) => s === \":\");\n    }\n    return action;\n  };\n\n  minmax = (player) => {\n    let squares = this.squares.slice();\n    let next_val = 0;\n    let action = -1;\n    const best_val = player === \"X\" ? 1 : -1;\n    const next_player = player === \"X\" ? \"O\" : \"X\";\n\n    // pick a winning/loss-avoiding move if one exist\n    [player, next_player].forEach((cplayer) => {\n      if (next_val === 0) {\n        squares.forEach((element, index) => {\n          if (element === \":\") {\n            squares[index] = cplayer;\n            if (this.calculateWinner(squares) === cplayer) {\n              next_val = cplayer === player ? best_val : -best_val;\n              console.log(\n                `${cplayer} wins at ${index} with board ${squares} and next val is ${next_val}`\n              );\n              action = index;\n            }\n            squares[index] = \":\";\n          }\n        });\n      }\n    });\n    console.log(`checked for winner and val is ${next_val}`);\n    // pick the best remaining\n    if (next_val === 0) {\n      let [cnext_val, caction] = [next_val, action];\n      squares.forEach((element, index) => {\n        if (element === \":\") {\n          squares[index] = player;\n          [next_val, action] = this.minmax(\n            squares,\n            (player = player === \"X\" ? \"O\" : \"X\"),\n            (depth = depth + 1)\n          );\n          if (next_val === -best_val) {\n            [cnext_val, caction] = [next_val, action];\n          } else if (next_val === 0) {\n            [cnext_val, caction] = [next_val, action];\n          }\n          squares[index] = \":\";\n        }\n      });\n      [next_val, action] = [cnext_val, caction];\n    }\n    return [next_val, action];\n  };\n}\n"]},"metadata":{},"sourceType":"module"}