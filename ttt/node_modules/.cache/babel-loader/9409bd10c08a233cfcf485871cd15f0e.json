{"ast":null,"code":"class Game {\n  constructor() {\n    this.squares = Array(9).fill(null);\n\n    this.setAction = (player, action) => {\n      this.squares[action] = player;\n    };\n\n    this.getAIAction = () => {\n      // return center or top-left in first AI move\n      if (this.squares.filter(s => s === \"X\").length === 1) {\n        if (!this.squares[4]) {\n          return 4;\n        } else if (!this.squares[0]) {\n          return 0;\n        }\n      } // use minmax algorithm\n      // find action with least value by choosing opp's action with highest value\n\n\n      let [next_val, action] = this.minmax(\"O\");\n\n      if (!action) {\n        action = this.squares.findIndex(s => s === null);\n      }\n\n      return action;\n    };\n\n    this.minmax = player => {\n      let squares = this.squares.slice();\n      let next_val = 0;\n      let action = -1;\n      const best_val = player === \"X\" ? 1 : -1;\n      const next_player = player === \"X\" ? \"O\" : \"X\"; // pick a winning/loss-avoiding move if one exist\n\n      [player, next_player].forEach(cplayer => {\n        if (next_val === 0) {\n          squares.forEach((element, index) => {\n            if (element === null) {\n              squares[index] = cplayer;\n\n              if (this.calculateWinner(squares) === cplayer) {\n                next_val = cplayer === player ? best_val : -best_val;\n                action = index;\n              }\n\n              squares[index] = null;\n            }\n          });\n        }\n      }); // pick the best remaining\n\n      if (next_val === 0) {\n        let [cnext_val, caction] = [next_val, action];\n        squares.forEach((element, index) => {\n          if (!element) {\n            squares[index] = player;\n            [next_val, action] = this.minmax(player = player === \"X\" ? \"O\" : \"X\");\n\n            if (next_val === -best_val) {\n              [cnext_val, caction] = [next_val, action];\n            } else if (next_val === 0) {\n              [cnext_val, caction] = [next_val, action];\n            }\n\n            squares[index] = null;\n          }\n        });\n        [next_val, action] = [cnext_val, caction];\n      }\n\n      return [next_val, action];\n    };\n  }\n\n  calculateWinner() {\n    const lines = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]];\n\n    for (let i = 0; i < lines.length; i++) {\n      const [a, b, c] = lines[i];\n\n      if (this.squares[a] !== null && this.squares[a] === this.squares[b] && this.squares[a] === this.squares[c]) {\n        return this.squares[a];\n      }\n    }\n\n    return null;\n  }\n\n}\n\nexport default Game;","map":{"version":3,"sources":["/Users/jeanmariemariadassou/gamesui/ttt/src/logic/Game.js"],"names":["Game","squares","Array","fill","setAction","player","action","getAIAction","filter","s","length","next_val","minmax","findIndex","slice","best_val","next_player","forEach","cplayer","element","index","calculateWinner","cnext_val","caction","lines","i","a","b","c"],"mappings":"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","sourcesContent":["class Game {\n  squares = Array(9).fill(null);\n\n  calculateWinner() {\n    const lines = [\n      [0, 1, 2],\n      [3, 4, 5],\n      [6, 7, 8],\n      [0, 3, 6],\n      [1, 4, 7],\n      [2, 5, 8],\n      [0, 4, 8],\n      [2, 4, 6],\n    ];\n    for (let i = 0; i < lines.length; i++) {\n      const [a, b, c] = lines[i];\n      if (\n        this.squares[a] !== null &&\n        this.squares[a] === this.squares[b] &&\n        this.squares[a] === this.squares[c]\n      ) {\n        return this.squares[a];\n      }\n    }\n    return null;\n  }\n\n  setAction = (player, action) => {\n    this.squares[action] = player;\n  };\n\n  getAIAction = () => {\n    // return center or top-left in first AI move\n    if (this.squares.filter((s) => s === \"X\").length === 1) {\n      if (!this.squares[4]) {\n        return 4;\n      } else if (!this.squares[0]) {\n        return 0;\n      }\n    }\n    // use minmax algorithm\n    // find action with least value by choosing opp's action with highest value\n    let [next_val, action] = this.minmax(\"O\");\n    if (!action) {\n      action = this.squares.findIndex((s) => s === null);\n    }\n    return action;\n  };\n\n  minmax = (player) => {\n    let squares = this.squares.slice();\n    let next_val = 0;\n    let action = -1;\n    const best_val = player === \"X\" ? 1 : -1;\n    const next_player = player === \"X\" ? \"O\" : \"X\";\n\n    // pick a winning/loss-avoiding move if one exist\n    [player, next_player].forEach((cplayer) => {\n      if (next_val === 0) {\n        squares.forEach((element, index) => {\n          if (element === null) {\n            squares[index] = cplayer;\n            if (this.calculateWinner(squares) === cplayer) {\n              next_val = cplayer === player ? best_val : -best_val;\n              action = index;\n            }\n            squares[index] = null;\n          }\n        });\n      }\n    });\n    // pick the best remaining\n    if (next_val === 0) {\n      let [cnext_val, caction] = [next_val, action];\n      squares.forEach((element, index) => {\n        if (!element) {\n          squares[index] = player;\n          [next_val, action] = this.minmax(\n            (player = player === \"X\" ? \"O\" : \"X\")\n          );\n          if (next_val === -best_val) {\n            [cnext_val, caction] = [next_val, action];\n          } else if (next_val === 0) {\n            [cnext_val, caction] = [next_val, action];\n          }\n          squares[index] = null;\n        }\n      });\n      [next_val, action] = [cnext_val, caction];\n    }\n    return [next_val, action];\n  };\n}\n\nexport default Game;\n"]},"metadata":{},"sourceType":"module"}