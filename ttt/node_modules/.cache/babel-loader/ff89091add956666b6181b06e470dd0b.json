{"ast":null,"code":"class Game {\n  constructor() {\n    this.squares = Array(9).fill(null);\n\n    this.hasWinnder = () => this.calculateWinner(this.squares) !== null;\n\n    this.setAction = (player, action) => {\n      this.squares[action] = player;\n    };\n\n    this.getAIAction = () => {\n      // return center or top-left in first AI move\n      if (this.squares.filter(s => s === \"X\").length === 1) {\n        if (!this.squares[4]) {\n          return 4;\n        } else if (!this.squares[0]) {\n          return 0;\n        }\n      } // use minmax algorithm\n      // find action with least value by choosing opp's action with highest value\n\n\n      let squares = this.squares.slice();\n      let [, action] = this.minmax(squares, \"O\");\n\n      if (action === -1) {\n        action = this.squares.findIndex(s => s === null);\n      }\n\n      return action;\n    };\n\n    this.minmax = (squares, player, depth = 0) => {\n      let next_val = 0;\n      let action = -1;\n      const best_val = player === \"X\" ? 1 : -1;\n      const next_player = player === \"X\" ? \"O\" : \"X\"; // pick a winning/loss-avoiding move if one exist\n\n      [player, next_player].forEach(cplayer => {\n        if (next_val === 0) {\n          squares.forEach((element, index) => {\n            if (element === null) {\n              squares[index] = cplayer;\n              console.log(` ... checking ${index} for ${cplayer}`);\n\n              if (this.calculateWinner(squares) === cplayer) {\n                next_val = cplayer === player ? best_val : -best_val;\n                action = index;\n              }\n\n              squares[index] = null;\n            }\n          });\n        }\n      }); // pick the best remaining\n\n      console.log(`No winning solution ... searching`);\n\n      if (next_val === 0 && depth < 4) {\n        let [cnext_val, caction] = [next_val, action];\n        squares.forEach((element, index) => {\n          if (!element) {\n            squares[index] = player;\n            [next_val, action] = this.minmax(player = player === \"X\" ? \"O\" : \"X\", depth = depth + 1);\n\n            if (next_val === -best_val) {\n              [cnext_val, caction] = [next_val, action];\n            } else if (next_val === 0) {\n              [cnext_val, caction] = [next_val, action];\n            }\n\n            squares[index] = null;\n          }\n        });\n        [next_val, action] = [cnext_val, caction];\n      }\n\n      return [next_val, action];\n    };\n  }\n\n  calculateWinner(squares) {\n    const lines = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]];\n\n    for (let i = 0; i < lines.length; i++) {\n      const [a, b, c] = lines[i];\n\n      if (squares[a] !== null && squares[a] === squares[b] && squares[a] === squares[c]) {\n        return this.squares[a];\n      }\n    }\n\n    return null;\n  }\n\n}\n\nexport default Game;","map":{"version":3,"sources":["/Users/jeanmariemariadassou/gamesui/ttt/src/logic/Game.js"],"names":["Game","squares","Array","fill","hasWinnder","calculateWinner","setAction","player","action","getAIAction","filter","s","length","slice","minmax","findIndex","depth","next_val","best_val","next_player","forEach","cplayer","element","index","console","log","cnext_val","caction","lines","i","a","b","c"],"mappings":"AAAA,MAAMA,IAAN,CAAW;AAAA;AAAA,SACTC,OADS,GACCC,KAAK,CAAC,CAAD,CAAL,CAASC,IAAT,CAAc,IAAd,CADD;;AAAA,SAGTC,UAHS,GAGI,MAAM,KAAKC,eAAL,CAAqB,KAAKJ,OAA1B,MAAuC,IAHjD;;AAAA,SA6BTK,SA7BS,GA6BG,CAACC,MAAD,EAASC,MAAT,KAAoB;AAC9B,WAAKP,OAAL,CAAaO,MAAb,IAAuBD,MAAvB;AACD,KA/BQ;;AAAA,SAiCTE,WAjCS,GAiCK,MAAM;AAClB;AACA,UAAI,KAAKR,OAAL,CAAaS,MAAb,CAAqBC,CAAD,IAAOA,CAAC,KAAK,GAAjC,EAAsCC,MAAtC,KAAiD,CAArD,EAAwD;AACtD,YAAI,CAAC,KAAKX,OAAL,CAAa,CAAb,CAAL,EAAsB;AACpB,iBAAO,CAAP;AACD,SAFD,MAEO,IAAI,CAAC,KAAKA,OAAL,CAAa,CAAb,CAAL,EAAsB;AAC3B,iBAAO,CAAP;AACD;AACF,OARiB,CASlB;AACA;;;AACA,UAAIA,OAAO,GAAG,KAAKA,OAAL,CAAaY,KAAb,EAAd;AAEA,UAAI,GAAGL,MAAH,IAAa,KAAKM,MAAL,CAAYb,OAAZ,EAAqB,GAArB,CAAjB;;AACA,UAAIO,MAAM,KAAK,CAAC,CAAhB,EAAmB;AACjBA,QAAAA,MAAM,GAAG,KAAKP,OAAL,CAAac,SAAb,CAAwBJ,CAAD,IAAOA,CAAC,KAAK,IAApC,CAAT;AACD;;AACD,aAAOH,MAAP;AACD,KAnDQ;;AAAA,SAqDTM,MArDS,GAqDA,CAACb,OAAD,EAAUM,MAAV,EAAkBS,KAAK,GAAG,CAA1B,KAAgC;AACvC,UAAIC,QAAQ,GAAG,CAAf;AACA,UAAIT,MAAM,GAAG,CAAC,CAAd;AACA,YAAMU,QAAQ,GAAGX,MAAM,KAAK,GAAX,GAAiB,CAAjB,GAAqB,CAAC,CAAvC;AACA,YAAMY,WAAW,GAAGZ,MAAM,KAAK,GAAX,GAAiB,GAAjB,GAAuB,GAA3C,CAJuC,CAMvC;;AACA,OAACA,MAAD,EAASY,WAAT,EAAsBC,OAAtB,CAA+BC,OAAD,IAAa;AACzC,YAAIJ,QAAQ,KAAK,CAAjB,EAAoB;AAClBhB,UAAAA,OAAO,CAACmB,OAAR,CAAgB,CAACE,OAAD,EAAUC,KAAV,KAAoB;AAClC,gBAAID,OAAO,KAAK,IAAhB,EAAsB;AACpBrB,cAAAA,OAAO,CAACsB,KAAD,CAAP,GAAiBF,OAAjB;AACAG,cAAAA,OAAO,CAACC,GAAR,CAAa,iBAAgBF,KAAM,QAAOF,OAAQ,EAAlD;;AACA,kBAAI,KAAKhB,eAAL,CAAqBJ,OAArB,MAAkCoB,OAAtC,EAA+C;AAC7CJ,gBAAAA,QAAQ,GAAGI,OAAO,KAAKd,MAAZ,GAAqBW,QAArB,GAAgC,CAACA,QAA5C;AACAV,gBAAAA,MAAM,GAAGe,KAAT;AACD;;AACDtB,cAAAA,OAAO,CAACsB,KAAD,CAAP,GAAiB,IAAjB;AACD;AACF,WAVD;AAWD;AACF,OAdD,EAPuC,CAsBvC;;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAa,mCAAb;;AACA,UAAIR,QAAQ,KAAK,CAAb,IAAkBD,KAAK,GAAG,CAA9B,EAAiC;AAC/B,YAAI,CAACU,SAAD,EAAYC,OAAZ,IAAuB,CAACV,QAAD,EAAWT,MAAX,CAA3B;AACAP,QAAAA,OAAO,CAACmB,OAAR,CAAgB,CAACE,OAAD,EAAUC,KAAV,KAAoB;AAClC,cAAI,CAACD,OAAL,EAAc;AACZrB,YAAAA,OAAO,CAACsB,KAAD,CAAP,GAAiBhB,MAAjB;AACA,aAACU,QAAD,EAAWT,MAAX,IAAqB,KAAKM,MAAL,CAClBP,MAAM,GAAGA,MAAM,KAAK,GAAX,GAAiB,GAAjB,GAAuB,GADd,EAElBS,KAAK,GAAGA,KAAK,GAAG,CAFE,CAArB;;AAIA,gBAAIC,QAAQ,KAAK,CAACC,QAAlB,EAA4B;AAC1B,eAACQ,SAAD,EAAYC,OAAZ,IAAuB,CAACV,QAAD,EAAWT,MAAX,CAAvB;AACD,aAFD,MAEO,IAAIS,QAAQ,KAAK,CAAjB,EAAoB;AACzB,eAACS,SAAD,EAAYC,OAAZ,IAAuB,CAACV,QAAD,EAAWT,MAAX,CAAvB;AACD;;AACDP,YAAAA,OAAO,CAACsB,KAAD,CAAP,GAAiB,IAAjB;AACD;AACF,SAdD;AAeA,SAACN,QAAD,EAAWT,MAAX,IAAqB,CAACkB,SAAD,EAAYC,OAAZ,CAArB;AACD;;AACD,aAAO,CAACV,QAAD,EAAWT,MAAX,CAAP;AACD,KAjGQ;AAAA;;AAKTH,EAAAA,eAAe,CAACJ,OAAD,EAAU;AACvB,UAAM2B,KAAK,GAAG,CACZ,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CADY,EAEZ,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAFY,EAGZ,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAHY,EAIZ,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAJY,EAKZ,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CALY,EAMZ,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CANY,EAOZ,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAPY,EAQZ,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CARY,CAAd;;AAUA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,KAAK,CAAChB,MAA1B,EAAkCiB,CAAC,EAAnC,EAAuC;AACrC,YAAM,CAACC,CAAD,EAAIC,CAAJ,EAAOC,CAAP,IAAYJ,KAAK,CAACC,CAAD,CAAvB;;AACA,UACE5B,OAAO,CAAC6B,CAAD,CAAP,KAAe,IAAf,IACA7B,OAAO,CAAC6B,CAAD,CAAP,KAAe7B,OAAO,CAAC8B,CAAD,CADtB,IAEA9B,OAAO,CAAC6B,CAAD,CAAP,KAAe7B,OAAO,CAAC+B,CAAD,CAHxB,EAIE;AACA,eAAO,KAAK/B,OAAL,CAAa6B,CAAb,CAAP;AACD;AACF;;AACD,WAAO,IAAP;AACD;;AA3BQ;;AAoGX,eAAe9B,IAAf","sourcesContent":["class Game {\n  squares = Array(9).fill(null);\n\n  hasWinnder = () => this.calculateWinner(this.squares) !== null;\n\n  calculateWinner(squares) {\n    const lines = [\n      [0, 1, 2],\n      [3, 4, 5],\n      [6, 7, 8],\n      [0, 3, 6],\n      [1, 4, 7],\n      [2, 5, 8],\n      [0, 4, 8],\n      [2, 4, 6],\n    ];\n    for (let i = 0; i < lines.length; i++) {\n      const [a, b, c] = lines[i];\n      if (\n        squares[a] !== null &&\n        squares[a] === squares[b] &&\n        squares[a] === squares[c]\n      ) {\n        return this.squares[a];\n      }\n    }\n    return null;\n  }\n\n  setAction = (player, action) => {\n    this.squares[action] = player;\n  };\n\n  getAIAction = () => {\n    // return center or top-left in first AI move\n    if (this.squares.filter((s) => s === \"X\").length === 1) {\n      if (!this.squares[4]) {\n        return 4;\n      } else if (!this.squares[0]) {\n        return 0;\n      }\n    }\n    // use minmax algorithm\n    // find action with least value by choosing opp's action with highest value\n    let squares = this.squares.slice();\n\n    let [, action] = this.minmax(squares, \"O\");\n    if (action === -1) {\n      action = this.squares.findIndex((s) => s === null);\n    }\n    return action;\n  };\n\n  minmax = (squares, player, depth = 0) => {\n    let next_val = 0;\n    let action = -1;\n    const best_val = player === \"X\" ? 1 : -1;\n    const next_player = player === \"X\" ? \"O\" : \"X\";\n\n    // pick a winning/loss-avoiding move if one exist\n    [player, next_player].forEach((cplayer) => {\n      if (next_val === 0) {\n        squares.forEach((element, index) => {\n          if (element === null) {\n            squares[index] = cplayer;\n            console.log(` ... checking ${index} for ${cplayer}`);\n            if (this.calculateWinner(squares) === cplayer) {\n              next_val = cplayer === player ? best_val : -best_val;\n              action = index;\n            }\n            squares[index] = null;\n          }\n        });\n      }\n    });\n    // pick the best remaining\n    console.log(`No winning solution ... searching`);\n    if (next_val === 0 && depth < 4) {\n      let [cnext_val, caction] = [next_val, action];\n      squares.forEach((element, index) => {\n        if (!element) {\n          squares[index] = player;\n          [next_val, action] = this.minmax(\n            (player = player === \"X\" ? \"O\" : \"X\"),\n            (depth = depth + 1)\n          );\n          if (next_val === -best_val) {\n            [cnext_val, caction] = [next_val, action];\n          } else if (next_val === 0) {\n            [cnext_val, caction] = [next_val, action];\n          }\n          squares[index] = null;\n        }\n      });\n      [next_val, action] = [cnext_val, caction];\n    }\n    return [next_val, action];\n  };\n}\n\nexport default Game;\n"]},"metadata":{},"sourceType":"module"}